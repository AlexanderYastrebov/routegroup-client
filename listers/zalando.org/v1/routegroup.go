//lint:file-ignore ST1005 Generated code

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/szuecs/routegroup-client/apis/zalando.org/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RouteGroupLister helps list RouteGroups.
type RouteGroupLister interface {
	// List lists all RouteGroups in the indexer.
	List(selector labels.Selector) (ret []*v1.RouteGroup, err error)
	// RouteGroups returns an object that can list and get RouteGroups.
	RouteGroups(namespace string) RouteGroupNamespaceLister
	RouteGroupListerExpansion
}

// routeGroupLister implements the RouteGroupLister interface.
type routeGroupLister struct {
	indexer cache.Indexer
}

// NewRouteGroupLister returns a new RouteGroupLister.
func NewRouteGroupLister(indexer cache.Indexer) RouteGroupLister {
	return &routeGroupLister{indexer: indexer}
}

// List lists all RouteGroups in the indexer.
func (s *routeGroupLister) List(selector labels.Selector) (ret []*v1.RouteGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RouteGroup))
	})
	return ret, err
}

// RouteGroups returns an object that can list and get RouteGroups.
func (s *routeGroupLister) RouteGroups(namespace string) RouteGroupNamespaceLister {
	return routeGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RouteGroupNamespaceLister helps list and get RouteGroups.
type RouteGroupNamespaceLister interface {
	// List lists all RouteGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.RouteGroup, err error)
	// Get retrieves the RouteGroup from the indexer for a given namespace and name.
	Get(name string) (*v1.RouteGroup, error)
	RouteGroupNamespaceListerExpansion
}

// routeGroupNamespaceLister implements the RouteGroupNamespaceLister
// interface.
type routeGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RouteGroups in the indexer for a given namespace.
func (s routeGroupNamespaceLister) List(selector labels.Selector) (ret []*v1.RouteGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RouteGroup))
	})
	return ret, err
}

// Get retrieves the RouteGroup from the indexer for a given namespace and name.
func (s routeGroupNamespaceLister) Get(name string) (*v1.RouteGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("routegroup"), name)
	}
	return obj.(*v1.RouteGroup), nil
}
